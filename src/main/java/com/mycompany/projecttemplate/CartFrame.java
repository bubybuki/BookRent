/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.projecttemplate;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class CartFrame extends javax.swing.JInternalFrame {
    
    
    private MainUI mainUI;
     private DefaultTableModel cartTableModel;
    
    
    /**
     * Creates new form CartFrame
     */
    public CartFrame(MainUI mainUI) {
        initComponents();
        this.mainUI = mainUI;
        this.cartTableModel = (DefaultTableModel) CartTable.getModel();
        loadCartData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CartTable = new javax.swing.JTable();
        btnPayment = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        btnTableRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1450, 800));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Your cart item");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(248, 117, 170));
        jLabel2.setText("Back to shopping");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        CartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book's name", "Day(s)", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(CartTable);
        if (CartTable.getColumnModel().getColumnCount() > 0) {
            CartTable.getColumnModel().getColumn(0).setResizable(false);
            CartTable.getColumnModel().getColumn(1).setResizable(false);
            CartTable.getColumnModel().getColumn(2).setResizable(false);
        }

        btnPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttonPayment.png"))); // NOI18N
        btnPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPaymentMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Total :");

        labelPrice.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        labelPrice.setText("jLabel4");

        btnTableRefresh.setText("Refresh");
        btnTableRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTableRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 671, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(600, 600, 600))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPrice)
                        .addGap(611, 611, 611))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(285, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(632, 632, 632))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnTableRefresh)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnPayment)
                        .addGap(603, 603, 603))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTableRefresh))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(labelPrice))
                .addGap(27, 27, 27)
                .addComponent(btnPayment)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        if (mainUI != null) {
            mainUI.openHome();
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void btnPaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPaymentMouseClicked
        String username = Globalinfo.username;
        
        labelPrice.setText("0");
        
        // Clear the cart table
        cartTableModel.setRowCount(0);

        // Update the accountList table's ownedbook column
        updateOwnedBookColumn(username);

        // Close the CartFrame
        this.dispose();

        // Open the Payment frame
        Payment payment = new Payment();

        if (mainUI != null) {
            payment.setVisible(true);
            mainUI.getDesktopPane().add(payment);
        }
        
    }//GEN-LAST:event_btnPaymentMouseClicked
    
    private void updateOwnedBookColumn(String username) {
    try (Connection connection = DriverManager.getConnection("jdbc:sqlite:src\\main\\resources\\Account.db")) {
        // Construct an SQL query to update the ownedbook column
        String updateSql = "UPDATE accountList SET ownedbook = NULL WHERE username = ?";

        try (PreparedStatement updateStatement = connection.prepareStatement(updateSql)) {
            updateStatement.setString(1, username);
            updateStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
    private void btnTableRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTableRefreshMouseClicked
        // TODO add your handling code here:
        cartTableModel.setRowCount(0);
        loadCartData();
    }//GEN-LAST:event_btnTableRefreshMouseClicked
    private void loadCartData() {
    try (Connection connection = DriverManager.getConnection("jdbc:sqlite:src\\main\\resources\\Account.db")) {
        String username = Globalinfo.username;

        int totalCartPrice = 0;

        
        String sql = "SELECT ownedbook, member FROM accountList WHERE username = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, username);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    //check empty
                    String ownedBookData = resultSet.getString("ownedbook");
                    if (ownedBookData != null && !ownedBookData.isEmpty()) {
                        // Parse the ownedbook column to extract book IDs and days
                        String[] bookEntries = ownedBookData.split(",");
                        for (String entry : bookEntries) {
                            String[] parts = entry.split("\\(");
                            String bookId = parts[0];
                            int days = Integer.parseInt(parts[1].replaceAll("[^0-9]", ""));

                            // Fetch book name from the bookList table using the bookId
                            String bookName = getBookNameById(bookId);

                            // Calculate the total price based on the number of days
                            int totalPrice = calculateTotalPrice(days);

                            // Apply discount 
                            String membershipPlan = resultSet.getString("member");
                            double discount = getDiscountByMembership(membershipPlan);
                            totalPrice = applyDiscount(totalPrice, discount);

                            // Add data to CartTable
                            cartTableModel.addRow(new Object[]{bookName, "days " + days, totalPrice});

                            totalCartPrice += totalPrice;
                        }
                    }
                }
            }
            labelPrice.setText(String.valueOf(totalCartPrice));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }
    
    private String getBookNameById(String bookId) {
    String bookName = "Book Not Found";  // Default value if the book is not found

    // Connect to the SQLite database
    try (Connection connection = DriverManager.getConnection("jdbc:sqlite:src\\main\\resources\\Account.db")) {
        // Fetch book name from the bookList table based on the bookId
        String sql = "SELECT bookname FROM bookList WHERE bookId = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, bookId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Book found, retrieve the book name
                    bookName = resultSet.getString("bookName");
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return bookName;
}
   
   private int calculateTotalPrice(int days) {
    int totalPrice = 0;

    // Define the price for each day
    final int PRICE_1_DAY = 15;
    final int PRICE_3_DAYS = 40;
    final int PRICE_7_DAYS = 100;
    final int PRICE_15_DAYS = 210;
    final int PRICE_30_DAYS = 400;
    final int PRICE_60_DAYS = 700;

    // Calculate the total price based on the number of days
    switch (days) {
        case 1:
            totalPrice = PRICE_1_DAY;
            break;
        case 3:
            totalPrice = PRICE_3_DAYS;
            break;
        case 7:
            totalPrice = PRICE_7_DAYS;
            break;
        case 15:
            totalPrice = PRICE_15_DAYS;
            break;
        case 30:
            totalPrice = PRICE_30_DAYS;
            break;
        case 60:
            totalPrice = PRICE_60_DAYS;
            break;
        // Add more cases for other possible values of days if needed
        default:
            // Handle unsupported days value
            break;
    }

    return totalPrice;
} 
    
   private double getDiscountByMembership(String membershipPlan) {
    if (membershipPlan == null) {
        // Handle the case where membershipPlan is null (provide a default discount)
        return 0.0; // Default discount for null values
    }
       
    switch (membershipPlan) {
        case "Plan A":
            return 0.10; // 10% discount
        case "Plan B":
            return 0.15; // 15% discount
        case "Plan C":
            return 0.20; // 20% discount
        default:
            return 0.0; // No discount for other plans or if plan is not specified
    }
}

private int applyDiscount(int totalPrice, double discount) {
    // Calculate discounted price
    double discountedPrice = totalPrice - (totalPrice * discount);
    return (int) Math.round(discountedPrice);
}
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CartTable;
    private javax.swing.JLabel btnPayment;
    private javax.swing.JButton btnTableRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelPrice;
    // End of variables declaration//GEN-END:variables
}
